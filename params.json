{"body":"# How to Use\r\n## Spring-Configuration\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\r\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\">\r\n\r\n\t<aop:aspectj-autoproxy />\r\n\t<context:annotation-config />\r\n\t<context:component-scan base-package=\"ch.krizi\" />\r\n\r\n\t<bean id=\"parameterCheckAspect\" class=\"ch.krizi.utility.parametercheck.aspect.ParameterCheckAspect\">\r\n\t\t<property name=\"parameterHandlerFactory\" ref=\"parameterHandlerFactory\" />\r\n\t</bean>\r\n\r\n\t<bean id=\"parameterHandlerFactory\" class=\"ch.krizi.utility.parametercheck.factory.DefaultParameterHandlerFactory\">\r\n\t\t<constructor-arg ref=\"parameterHandlerFactorySpringHelper\" />\r\n\t</bean>\r\n\r\n\t<bean id=\"parameterHandlerFactorySpringHelper\" class=\"ch.krizi.utility.parametercheck.factory.ParameterHandlerFactorySpringHelper\" />\r\n\r\n</beans>\r\n```\r\nThats it... \r\n\r\nNow you can use it everywhere in spring-managed beans... \r\n```\r\n@Component\r\npublic class TestBean {\r\n\tpublic void doSomething(@NotEmpty List<?> list, @NotNull Object object, @NotEmpty String value) {\r\n\t\t// all params are valid... \r\n\t}\r\n}\r\n```\r\n\r\n## How to write custom ParameterHandler\r\n1. write a Annotation\r\n2. write a PrameterHandler \r\n3. use it :)\r\n\r\n### Annotation\r\n```\r\n@Documented\r\n@ParameterCheck(CustomParameterHandler.class)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ ElementType.PARAMETER, ElementType.ANNOTATION_TYPE })\r\n@NotNull // you can re-use other available Annotations\r\npublic @interface CustomParameter {\r\n\tString message() default \"parameter is null\";\r\n}\r\n```\r\n1. **you need to annotate your Annotation with @ParameterCheck.**\r\n2. @Retention(RetentionPolicy.RUNTIME) the Annotation can be read at runtime\r\n3. you set the @Target to ElementType.PARAMETER, ElementType.ANNOTATION_TYPE\r\n4. re-use available Annotations @NotNull\r\n\r\n### PrameterHandler-Class\r\n```\r\n@Named\r\n@Singleton\r\npublic class CustomParameterHandler implements ParameterHandlerCheck {\r\n\tprivate final Logger logger = LoggerFactory.getLogger(CustomParameterHandler.class);\r\n\r\n\t@Override\r\n\tpublic void check(final MethodParameter methodParameter) {\r\n\t\tCustomParameter customParameter = methodParameter.getAnnotation(CustomParameter.class);\r\n\t\tif (isValid(methodParameter.getObject())) {\r\n\t\t\tIllegalArgumentException e = new IllegalArgumentException(customParameter.message());\r\n\t\t\tthrow new ParameterCheckException(e);\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void isValid(Object object) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n```\r\n\r\n## Available Annotations\r\n### NotNull\r\nCheck if the Parameter is not null.\r\n### NotEmpty\r\nCheck if the Parameter is not empty. Supported-Classes: Collection, Map, String\r\n### Range\r\nCheck if the Number is in a valid Range.","tagline":"Check Parameter","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Parametercheck"}